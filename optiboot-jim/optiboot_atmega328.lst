
optiboot_atmega328.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000020a  00007e00  00007e00  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         00000b58  00000000  00000000  00000260  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000a74  00000000  00000000  00000db8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00007e00 <main>:
    7e00:	11 24       	eor	r1, r1
    7e02:	85 e0       	ldi	r24, 0x05	; 5
    7e04:	80 93 81 00 	sts	0x0081, r24
    7e08:	82 e0       	ldi	r24, 0x02	; 2
    7e0a:	80 93 c0 00 	sts	0x00C0, r24
    7e0e:	88 e1       	ldi	r24, 0x18	; 24
    7e10:	80 93 c1 00 	sts	0x00C1, r24
    7e14:	86 e0       	ldi	r24, 0x06	; 6
    7e16:	80 93 c2 00 	sts	0x00C2, r24
    7e1a:	80 e1       	ldi	r24, 0x10	; 16
    7e1c:	80 93 c4 00 	sts	0x00C4, r24
    7e20:	84 b7       	in	r24, 0x34	; 52
    7e22:	14 be       	out	0x34, r1	; 52
    7e24:	81 ff       	sbrs	r24, 1
    7e26:	de d0       	rcall	.+444    	; 0x7fe4 <appStart>
    7e28:	8e e0       	ldi	r24, 0x0E	; 14
    7e2a:	d6 d0       	rcall	.+428    	; 0x7fd8 <watchdogConfig>
    7e2c:	25 9a       	sbi	0x04, 5	; 4
    7e2e:	86 e0       	ldi	r24, 0x06	; 6
    7e30:	20 e3       	ldi	r18, 0x30	; 48
    7e32:	3c ef       	ldi	r19, 0xFC	; 252
    7e34:	91 e0       	ldi	r25, 0x01	; 1
    7e36:	30 93 85 00 	sts	0x0085, r19
    7e3a:	20 93 84 00 	sts	0x0084, r18
    7e3e:	96 bb       	out	0x16, r25	; 22
    7e40:	b0 9b       	sbis	0x16, 0	; 22
    7e42:	fe cf       	rjmp	.-4      	; 0x7e40 <main+0x40>
    7e44:	1d 9a       	sbi	0x03, 5	; 3
    7e46:	a8 95       	wdr
    7e48:	81 50       	subi	r24, 0x01	; 1
    7e4a:	a9 f7       	brne	.-22     	; 0x7e36 <main+0x36>
    7e4c:	dd 24       	eor	r13, r13
    7e4e:	d3 94       	inc	r13
    7e50:	a5 e0       	ldi	r26, 0x05	; 5
    7e52:	ea 2e       	mov	r14, r26
    7e54:	f1 e1       	ldi	r31, 0x11	; 17
    7e56:	ff 2e       	mov	r15, r31
    7e58:	b2 d0       	rcall	.+356    	; 0x7fbe <getch>
    7e5a:	81 34       	cpi	r24, 0x41	; 65
    7e5c:	21 f4       	brne	.+8      	; 0x7e66 <main+0x66>
    7e5e:	81 e0       	ldi	r24, 0x01	; 1
    7e60:	cc d0       	rcall	.+408    	; 0x7ffa <getNch>
    7e62:	83 e0       	ldi	r24, 0x03	; 3
    7e64:	24 c0       	rjmp	.+72     	; 0x7eae <main+0xae>
    7e66:	82 34       	cpi	r24, 0x42	; 66
    7e68:	11 f4       	brne	.+4      	; 0x7e6e <main+0x6e>
    7e6a:	84 e1       	ldi	r24, 0x14	; 20
    7e6c:	03 c0       	rjmp	.+6      	; 0x7e74 <main+0x74>
    7e6e:	85 34       	cpi	r24, 0x45	; 69
    7e70:	19 f4       	brne	.+6      	; 0x7e78 <main+0x78>
    7e72:	85 e0       	ldi	r24, 0x05	; 5
    7e74:	c2 d0       	rcall	.+388    	; 0x7ffa <getNch>
    7e76:	98 c0       	rjmp	.+304    	; 0x7fa8 <main+0x1a8>
    7e78:	85 35       	cpi	r24, 0x55	; 85
    7e7a:	a1 f4       	brne	.+40     	; 0x7ea4 <main+0xa4>
    7e7c:	a0 d0       	rcall	.+320    	; 0x7fbe <getch>
    7e7e:	08 2f       	mov	r16, r24
    7e80:	10 e0       	ldi	r17, 0x00	; 0
    7e82:	10 93 01 02 	sts	0x0201, r17
    7e86:	00 93 00 02 	sts	0x0200, r16
    7e8a:	99 d0       	rcall	.+306    	; 0x7fbe <getch>
    7e8c:	90 e0       	ldi	r25, 0x00	; 0
    7e8e:	98 2f       	mov	r25, r24
    7e90:	88 27       	eor	r24, r24
    7e92:	80 2b       	or	r24, r16
    7e94:	91 2b       	or	r25, r17
    7e96:	88 0f       	add	r24, r24
    7e98:	99 1f       	adc	r25, r25
    7e9a:	90 93 01 02 	sts	0x0201, r25
    7e9e:	80 93 00 02 	sts	0x0200, r24
    7ea2:	81 c0       	rjmp	.+258    	; 0x7fa6 <main+0x1a6>
    7ea4:	86 35       	cpi	r24, 0x56	; 86
    7ea6:	29 f4       	brne	.+10     	; 0x7eb2 <main+0xb2>
    7ea8:	84 e0       	ldi	r24, 0x04	; 4
    7eaa:	a7 d0       	rcall	.+334    	; 0x7ffa <getNch>
    7eac:	80 e0       	ldi	r24, 0x00	; 0
    7eae:	7f d0       	rcall	.+254    	; 0x7fae <putch>
    7eb0:	7b c0       	rjmp	.+246    	; 0x7fa8 <main+0x1a8>
    7eb2:	84 36       	cpi	r24, 0x64	; 100
    7eb4:	09 f0       	breq	.+2      	; 0x7eb8 <main+0xb8>
    7eb6:	51 c0       	rjmp	.+162    	; 0x7f5a <main+0x15a>
    7eb8:	8a d0       	rcall	.+276    	; 0x7fce <getLen>
    7eba:	e0 91 00 02 	lds	r30, 0x0200
    7ebe:	f0 91 01 02 	lds	r31, 0x0201
    7ec2:	80 e7       	ldi	r24, 0x70	; 112
    7ec4:	e0 30       	cpi	r30, 0x00	; 0
    7ec6:	f8 07       	cpc	r31, r24
    7ec8:	18 f4       	brcc	.+6      	; 0x7ed0 <main+0xd0>
    7eca:	83 e0       	ldi	r24, 0x03	; 3
    7ecc:	87 bf       	out	0x37, r24	; 55
    7ece:	e8 95       	spm
    7ed0:	c0 e0       	ldi	r28, 0x00	; 0
    7ed2:	d1 e0       	ldi	r29, 0x01	; 1
    7ed4:	74 d0       	rcall	.+232    	; 0x7fbe <getch>
    7ed6:	89 93       	st	Y+, r24
    7ed8:	80 91 02 02 	lds	r24, 0x0202
    7edc:	81 50       	subi	r24, 0x01	; 1
    7ede:	80 93 02 02 	sts	0x0202, r24
    7ee2:	88 23       	and	r24, r24
    7ee4:	b9 f7       	brne	.-18     	; 0x7ed4 <main+0xd4>
    7ee6:	e0 91 00 02 	lds	r30, 0x0200
    7eea:	f0 91 01 02 	lds	r31, 0x0201
    7eee:	80 e7       	ldi	r24, 0x70	; 112
    7ef0:	e0 30       	cpi	r30, 0x00	; 0
    7ef2:	f8 07       	cpc	r31, r24
    7ef4:	18 f0       	brcs	.+6      	; 0x7efc <main+0xfc>
    7ef6:	83 e0       	ldi	r24, 0x03	; 3
    7ef8:	87 bf       	out	0x37, r24	; 55
    7efa:	e8 95       	spm
    7efc:	78 d0       	rcall	.+240    	; 0x7fee <verifySpace>
    7efe:	07 b6       	in	r0, 0x37	; 55
    7f00:	00 fc       	sbrc	r0, 0
    7f02:	fd cf       	rjmp	.-6      	; 0x7efe <main+0xfe>
    7f04:	40 91 00 02 	lds	r20, 0x0200
    7f08:	50 91 01 02 	lds	r21, 0x0201
    7f0c:	a0 e0       	ldi	r26, 0x00	; 0
    7f0e:	b1 e0       	ldi	r27, 0x01	; 1
    7f10:	2c 91       	ld	r18, X
    7f12:	30 e0       	ldi	r19, 0x00	; 0
    7f14:	11 96       	adiw	r26, 0x01	; 1
    7f16:	8c 91       	ld	r24, X
    7f18:	11 97       	sbiw	r26, 0x01	; 1
    7f1a:	90 e0       	ldi	r25, 0x00	; 0
    7f1c:	98 2f       	mov	r25, r24
    7f1e:	88 27       	eor	r24, r24
    7f20:	82 2b       	or	r24, r18
    7f22:	93 2b       	or	r25, r19
    7f24:	12 96       	adiw	r26, 0x02	; 2
    7f26:	fa 01       	movw	r30, r20
    7f28:	0c 01       	movw	r0, r24
    7f2a:	d0 92 57 00 	sts	0x0057, r13
    7f2e:	e8 95       	spm
    7f30:	11 24       	eor	r1, r1
    7f32:	4e 5f       	subi	r20, 0xFE	; 254
    7f34:	5f 4f       	sbci	r21, 0xFF	; 255
    7f36:	f1 e0       	ldi	r31, 0x01	; 1
    7f38:	a0 38       	cpi	r26, 0x80	; 128
    7f3a:	bf 07       	cpc	r27, r31
    7f3c:	49 f7       	brne	.-46     	; 0x7f10 <main+0x110>
    7f3e:	e0 91 00 02 	lds	r30, 0x0200
    7f42:	f0 91 01 02 	lds	r31, 0x0201
    7f46:	e0 92 57 00 	sts	0x0057, r14
    7f4a:	e8 95       	spm
    7f4c:	07 b6       	in	r0, 0x37	; 55
    7f4e:	00 fc       	sbrc	r0, 0
    7f50:	fd cf       	rjmp	.-6      	; 0x7f4c <main+0x14c>
    7f52:	f0 92 57 00 	sts	0x0057, r15
    7f56:	e8 95       	spm
    7f58:	27 c0       	rjmp	.+78     	; 0x7fa8 <main+0x1a8>
    7f5a:	84 37       	cpi	r24, 0x74	; 116
    7f5c:	b9 f4       	brne	.+46     	; 0x7f8c <main+0x18c>
    7f5e:	37 d0       	rcall	.+110    	; 0x7fce <getLen>
    7f60:	46 d0       	rcall	.+140    	; 0x7fee <verifySpace>
    7f62:	e0 91 00 02 	lds	r30, 0x0200
    7f66:	f0 91 01 02 	lds	r31, 0x0201
    7f6a:	31 96       	adiw	r30, 0x01	; 1
    7f6c:	f0 93 01 02 	sts	0x0201, r31
    7f70:	e0 93 00 02 	sts	0x0200, r30
    7f74:	31 97       	sbiw	r30, 0x01	; 1
    7f76:	e4 91       	lpm	r30, Z+
    7f78:	8e 2f       	mov	r24, r30
    7f7a:	19 d0       	rcall	.+50     	; 0x7fae <putch>
    7f7c:	80 91 02 02 	lds	r24, 0x0202
    7f80:	81 50       	subi	r24, 0x01	; 1
    7f82:	80 93 02 02 	sts	0x0202, r24
    7f86:	88 23       	and	r24, r24
    7f88:	61 f7       	brne	.-40     	; 0x7f62 <main+0x162>
    7f8a:	0e c0       	rjmp	.+28     	; 0x7fa8 <main+0x1a8>
    7f8c:	85 37       	cpi	r24, 0x75	; 117
    7f8e:	39 f4       	brne	.+14     	; 0x7f9e <main+0x19e>
    7f90:	2e d0       	rcall	.+92     	; 0x7fee <verifySpace>
    7f92:	8e e1       	ldi	r24, 0x1E	; 30
    7f94:	0c d0       	rcall	.+24     	; 0x7fae <putch>
    7f96:	85 e9       	ldi	r24, 0x95	; 149
    7f98:	0a d0       	rcall	.+20     	; 0x7fae <putch>
    7f9a:	8f e0       	ldi	r24, 0x0F	; 15
    7f9c:	88 cf       	rjmp	.-240    	; 0x7eae <main+0xae>
    7f9e:	81 35       	cpi	r24, 0x51	; 81
    7fa0:	11 f4       	brne	.+4      	; 0x7fa6 <main+0x1a6>
    7fa2:	88 e0       	ldi	r24, 0x08	; 8
    7fa4:	19 d0       	rcall	.+50     	; 0x7fd8 <watchdogConfig>
    7fa6:	23 d0       	rcall	.+70     	; 0x7fee <verifySpace>
    7fa8:	80 e1       	ldi	r24, 0x10	; 16
    7faa:	01 d0       	rcall	.+2      	; 0x7fae <putch>
    7fac:	55 cf       	rjmp	.-342    	; 0x7e58 <main+0x58>

00007fae <putch>:
    }
    putch(STK_OK);
  }
}

void putch(char ch) {
    7fae:	98 2f       	mov	r25, r24
#ifndef SOFT_UART
  while (!(UCSR0A & _BV(UDRE0)));
    7fb0:	80 91 c0 00 	lds	r24, 0x00C0
    7fb4:	85 ff       	sbrs	r24, 5
    7fb6:	fc cf       	rjmp	.-8      	; 0x7fb0 <putch+0x2>
  UDR0 = ch;
    7fb8:	90 93 c6 00 	sts	0x00C6, r25
      [uartBit] "I" (UART_TX_BIT)
    :
      "r25"
  );
#endif
}
    7fbc:	08 95       	ret

00007fbe <getch>:
  return getch();
}

// Watchdog functions. These are only safe with interrupts turned off.
void watchdogReset() {
  __asm__ __volatile__ (
    7fbe:	a8 95       	wdr
      [uartBit] "I" (UART_RX_BIT)
    :
      "r25"
);
#else
  while(!(UCSR0A & _BV(RXC0)));
    7fc0:	80 91 c0 00 	lds	r24, 0x00C0
    7fc4:	87 ff       	sbrs	r24, 7
    7fc6:	fc cf       	rjmp	.-8      	; 0x7fc0 <getch+0x2>
  ch = UDR0;
    7fc8:	80 91 c6 00 	lds	r24, 0x00C6
#ifdef LED_DATA_FLASH
  LED_PIN |= _BV(LED);
#endif

  return ch;
}
    7fcc:	08 95       	ret

00007fce <getLen>:
  } while (--count);
}
#endif

uint8_t getLen() {
  getch();
    7fce:	f7 df       	rcall	.-18     	; 0x7fbe <getch>
  length = getch();
    7fd0:	f6 df       	rcall	.-20     	; 0x7fbe <getch>
    7fd2:	80 93 02 02 	sts	0x0202, r24
  return getch();
    7fd6:	f3 cf       	rjmp	.-26     	; 0x7fbe <getch>

00007fd8 <watchdogConfig>:
    "wdr\n"
  );
}

void watchdogConfig(uint8_t x) {
  WDTCSR = _BV(WDCE) | _BV(WDE);
    7fd8:	e0 e6       	ldi	r30, 0x60	; 96
    7fda:	f0 e0       	ldi	r31, 0x00	; 0
    7fdc:	98 e1       	ldi	r25, 0x18	; 24
    7fde:	90 83       	st	Z, r25
  WDTCSR = x;
    7fe0:	80 83       	st	Z, r24
}
    7fe2:	08 95       	ret

00007fe4 <appStart>:

void appStart() {
  watchdogConfig(WATCHDOG_OFF);
    7fe4:	80 e0       	ldi	r24, 0x00	; 0
    7fe6:	f8 df       	rcall	.-16     	; 0x7fd8 <watchdogConfig>
  __asm__ __volatile__ (
    7fe8:	ee 27       	eor	r30, r30
    7fea:	ff 27       	eor	r31, r31
    7fec:	09 94       	ijmp

00007fee <verifySpace>:
  do getch(); while (--count);
  verifySpace();
}

void verifySpace() {
  if (getch() != CRC_EOP) appStart();
    7fee:	e7 df       	rcall	.-50     	; 0x7fbe <getch>
    7ff0:	80 32       	cpi	r24, 0x20	; 32
    7ff2:	09 f0       	breq	.+2      	; 0x7ff6 <verifySpace+0x8>
    7ff4:	f7 df       	rcall	.-18     	; 0x7fe4 <appStart>
  putch(STK_INSYNC);
    7ff6:	84 e1       	ldi	r24, 0x14	; 20
    7ff8:	da cf       	rjmp	.-76     	; 0x7fae <putch>

00007ffa <getNch>:
    ::[count] "M" (UART_B_VALUE)
  );
}
#endif

void getNch(uint8_t count) {
    7ffa:	1f 93       	push	r17
    7ffc:	18 2f       	mov	r17, r24
  do getch(); while (--count);
    7ffe:	df df       	rcall	.-66     	; 0x7fbe <getch>
    8000:	11 50       	subi	r17, 0x01	; 1
    8002:	e9 f7       	brne	.-6      	; 0x7ffe <getNch+0x4>
  verifySpace();
    8004:	f4 df       	rcall	.-24     	; 0x7fee <verifySpace>
}
    8006:	1f 91       	pop	r17
    8008:	08 95       	ret
