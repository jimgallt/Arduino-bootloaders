
optiboot_atmega328.elf:     file format elf32-avr		optiboot_atmega328.elf:     file format elf32-avr

Sections:							Sections:
Idx Name          Size      VMA       LMA       File off  Alg	Idx Name          Size      VMA       LMA       File off  Alg
  0 .text         000001ee  00007e00  00007e00  00000054  2**	  0 .text         000001ee  00007e00  00007e00  00000054  2**
                  CONTENTS, ALLOC, LOAD, READONLY, CODE		                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         00000b4c  00000000  00000000  00000244  2** |	  1 .debug_aranges 00000028  00000000  00000000  00000242  2*
                  CONTENTS, READONLY, DEBUGGING			                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000a5c  00000000  00000000  00000d90  2** |	  2 .debug_pubnames 0000006a  00000000  00000000  0000026a  2
							      >	                  CONTENTS, READONLY, DEBUGGING
							      >	  3 .debug_info   00000269  00000000  00000000  000002d4  2**
							      >	                  CONTENTS, READONLY, DEBUGGING
							      >	  4 .debug_abbrev 00000196  00000000  00000000  0000053d  2**
							      >	                  CONTENTS, READONLY, DEBUGGING
							      >	  5 .debug_line   000003db  00000000  00000000  000006d3  2**
							      >	                  CONTENTS, READONLY, DEBUGGING
							      >	  6 .debug_frame  00000090  00000000  00000000  00000ab0  2**
							      >	                  CONTENTS, READONLY, DEBUGGING
							      >	  7 .debug_str    00000124  00000000  00000000  00000b40  2**
							      >	                  CONTENTS, READONLY, DEBUGGING
							      >	  8 .debug_loc    000001d1  00000000  00000000  00000c64  2**
							      >	                  CONTENTS, READONLY, DEBUGGING
							      >	  9 .debug_ranges 00000068  00000000  00000000  00000e35  2**
                  CONTENTS, READONLY, DEBUGGING			                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:					Disassembly of section .text:

00007e00 <main>:						00007e00 <main>:
							      >	#ifdef VIRTUAL_BOOT_PARTITION
							      >	#define rstVect (*(uint16_t*)(0x204))
							      >	#define wdtVect (*(uint16_t*)(0x206))
							      >	#endif
							      >	/* main program starts here */
							      >	int main(void) {
    7e00:	11 24       	eor	r1, r1			    7e00:	11 24       	eor	r1, r1
							      >
							      >	  uint8_t ch;
							      >
							      >	#if LED_START_FLASHES > 0
							      >	  // Set up Timer 1 for timeout counter
							      >	  TCCR1B = _BV(CS12) | _BV(CS10); // div 1024
    7e02:	85 e0       	ldi	r24, 0x05	; 5	    7e02:	85 e0       	ldi	r24, 0x05	; 5
    7e04:	80 93 81 00 	sts	0x0081, r24		    7e04:	80 93 81 00 	sts	0x0081, r24
							      >	#endif
							      >	#ifndef SOFT_UART
							      >	  UCSR0A = _BV(U2X0); //Double speed mode USART0
    7e08:	82 e0       	ldi	r24, 0x02	; 2	    7e08:	82 e0       	ldi	r24, 0x02	; 2
    7e0a:	80 93 c0 00 	sts	0x00C0, r24		    7e0a:	80 93 c0 00 	sts	0x00C0, r24
							      >	  UCSR0B = _BV(RXEN0) | _BV(TXEN0);
    7e0e:	88 e1       	ldi	r24, 0x18	; 24	    7e0e:	88 e1       	ldi	r24, 0x18	; 24
    7e10:	80 93 c1 00 	sts	0x00C1, r24		    7e10:	80 93 c1 00 	sts	0x00C1, r24
							      >	  UCSR0C = _BV(UCSZ00) | _BV(UCSZ01);
    7e14:	86 e0       	ldi	r24, 0x06	; 6	    7e14:	86 e0       	ldi	r24, 0x06	; 6
    7e16:	80 93 c2 00 	sts	0x00C2, r24		    7e16:	80 93 c2 00 	sts	0x00C2, r24
							      >	  UBRR0L = (uint8_t)( (F_CPU + BAUD_RATE * 4L) / (BAUD_RATE *
    7e1a:	80 e1       	ldi	r24, 0x10	; 16	    7e1a:	80 e1       	ldi	r24, 0x10	; 16
    7e1c:	80 93 c4 00 	sts	0x00C4, r24		    7e1c:	80 93 c4 00 	sts	0x00C4, r24
							      >	#endif
							      >
							      >	  // Adaboot no-wait mod
							      >	  ch = MCUSR;
    7e20:	84 b7       	in	r24, 0x34	; 52	    7e20:	84 b7       	in	r24, 0x34	; 52
							      >	  MCUSR = 0;
    7e22:	14 be       	out	0x34, r1	; 52	    7e22:	14 be       	out	0x34, r1	; 52
							      >	  if (!(ch & _BV(EXTRF))) appStart();
    7e24:	81 ff       	sbrs	r24, 1			    7e24:	81 ff       	sbrs	r24, 1
    7e26:	d0 d0       	rcall	.+416    	; 0x7	    7e26:	d0 d0       	rcall	.+416    	; 0x7
							      >
							      >	  // Set up watchdog to trigger after 500ms
							      >	  watchdogConfig(WATCHDOG_500MS);
    7e28:	8d e0       	ldi	r24, 0x0D	; 13	    7e28:	8d e0       	ldi	r24, 0x0D	; 13
    7e2a:	c8 d0       	rcall	.+400    	; 0x7	    7e2a:	c8 d0       	rcall	.+400    	; 0x7
							      >
							      >	  /* Set LED pin as output */
							      >	  LED_DDR |= _BV(LED);
    7e2c:	25 9a       	sbi	0x04, 5	; 4		    7e2c:	25 9a       	sbi	0x04, 5	; 4
    7e2e:	86 e0       	ldi	r24, 0x06	; 6	    7e2e:	86 e0       	ldi	r24, 0x06	; 6
							      >	}
							      >
							      >	#if LED_START_FLASHES > 0
							      >	void flash_led(uint8_t count) {
							      >	  do {
							      >	    TCNT1 = -(F_CPU/(1024*16));
    7e30:	20 e3       	ldi	r18, 0x30	; 48	    7e30:	20 e3       	ldi	r18, 0x30	; 48
    7e32:	3c ef       	ldi	r19, 0xFC	; 252	    7e32:	3c ef       	ldi	r19, 0xFC	; 252
							      >	    TIFR1 = _BV(TOV1);
    7e34:	91 e0       	ldi	r25, 0x01	; 1	    7e34:	91 e0       	ldi	r25, 0x01	; 1
							      >	}
							      >
							      >	#if LED_START_FLASHES > 0
							      >	void flash_led(uint8_t count) {
							      >	  do {
							      >	    TCNT1 = -(F_CPU/(1024*16));
    7e36:	30 93 85 00 	sts	0x0085, r19		    7e36:	30 93 85 00 	sts	0x0085, r19
    7e3a:	20 93 84 00 	sts	0x0084, r18		    7e3a:	20 93 84 00 	sts	0x0084, r18
							      >	    TIFR1 = _BV(TOV1);
    7e3e:	96 bb       	out	0x16, r25	; 22	    7e3e:	96 bb       	out	0x16, r25	; 22
							      >	    while(!(TIFR1 & _BV(TOV1)));
    7e40:	b0 9b       	sbis	0x16, 0	; 22		    7e40:	b0 9b       	sbis	0x16, 0	; 22
    7e42:	fe cf       	rjmp	.-4      	; 0x7	    7e42:	fe cf       	rjmp	.-4      	; 0x7
							      >	    LED_PIN |= _BV(LED);
    7e44:	1d 9a       	sbi	0x03, 5	; 3		    7e44:	1d 9a       	sbi	0x03, 5	; 3
							      >	  return getch();
							      >	}
							      >
							      >	// Watchdog functions. These are only safe with interrupts tu
							      >	void watchdogReset() {
							      >	  __asm__ __volatile__ (
    7e46:	a8 95       	wdr				    7e46:	a8 95       	wdr
							      >	    TCNT1 = -(F_CPU/(1024*16));
							      >	    TIFR1 = _BV(TOV1);
							      >	    while(!(TIFR1 & _BV(TOV1)));
							      >	    LED_PIN |= _BV(LED);
							      >	    watchdogReset();
							      >	  } while (--count);
    7e48:	81 50       	subi	r24, 0x01	; 1	    7e48:	81 50       	subi	r24, 0x01	; 1
    7e4a:	a9 f7       	brne	.-22     	; 0x7	    7e4a:	a9 f7       	brne	.-22     	; 0x7
							      >	    /* get character from UART */
							      >	    ch = getch();
							      >
							      >	    if(ch == STK_GET_PARAMETER) {
							      >	      // GET PARAMETER returns a generic 0x03 reply - enough 
							      >	      getNch(1);
    7e4c:	dd 24       	eor	r13, r13		    7e4c:	dd 24       	eor	r13, r13
    7e4e:	d3 94       	inc	r13			    7e4e:	d3 94       	inc	r13
							      >	        boot_page_fill((uint16_t)(void*)addrPtr,a);
							      >	        addrPtr += 2;
							      >	      } while (--ch);
							      >	      
							      >	      // Write from programming buffer
							      >	      boot_page_write((uint16_t)(void*)address);
    7e50:	a5 e0       	ldi	r26, 0x05	; 5	    7e50:	a5 e0       	ldi	r26, 0x05	; 5
    7e52:	ea 2e       	mov	r14, r26		    7e52:	ea 2e       	mov	r14, r26
							      >	      boot_spm_busy_wait();
							      >
							      >	#if defined(RWWSRE)
							      >	      // Reenable read access to flash
							      >	      boot_rww_enable();
    7e54:	f1 e1       	ldi	r31, 0x11	; 17	    7e54:	f1 e1       	ldi	r31, 0x11	; 17
    7e56:	ff 2e       	mov	r15, r31		    7e56:	ff 2e       	mov	r15, r31
							      >	#endif
							      >
							      >	  /* Forever loop */
							      >	  for (;;) {
							      >	    /* get character from UART */
							      >	    ch = getch();
    7e58:	a4 d0       	rcall	.+328    	; 0x7	    7e58:	a4 d0       	rcall	.+328    	; 0x7
							      >
							      >	    if(ch == STK_GET_PARAMETER) {
    7e5a:	81 34       	cpi	r24, 0x41	; 65	    7e5a:	81 34       	cpi	r24, 0x41	; 65
    7e5c:	21 f4       	brne	.+8      	; 0x7	    7e5c:	21 f4       	brne	.+8      	; 0x7
							      >	      // GET PARAMETER returns a generic 0x03 reply - enough 
							      >	      getNch(1);
    7e5e:	81 e0       	ldi	r24, 0x01	; 1	    7e5e:	81 e0       	ldi	r24, 0x01	; 1
    7e60:	be d0       	rcall	.+380    	; 0x7 |	    7e60:	be d0       	rcall	.+380    	; 0x7
							      >	      putch(0x03);
    7e62:	83 e0       	ldi	r24, 0x03	; 3	    7e62:	83 e0       	ldi	r24, 0x03	; 3
    7e64:	24 c0       	rjmp	.+72     	; 0x7	    7e64:	24 c0       	rjmp	.+72     	; 0x7
							      >	    }
							      >	    else if(ch == STK_SET_DEVICE) {
    7e66:	82 34       	cpi	r24, 0x42	; 66	    7e66:	82 34       	cpi	r24, 0x42	; 66
    7e68:	11 f4       	brne	.+4      	; 0x7	    7e68:	11 f4       	brne	.+4      	; 0x7
							      >	      // SET DEVICE is ignored
							      >	      getNch(20);
    7e6a:	84 e1       	ldi	r24, 0x14	; 20	    7e6a:	84 e1       	ldi	r24, 0x14	; 20
    7e6c:	03 c0       	rjmp	.+6      	; 0x7	    7e6c:	03 c0       	rjmp	.+6      	; 0x7
							      >	    }
							      >	    else if(ch == STK_SET_DEVICE_EXT) {
    7e6e:	85 34       	cpi	r24, 0x45	; 69	    7e6e:	85 34       	cpi	r24, 0x45	; 69
    7e70:	19 f4       	brne	.+6      	; 0x7	    7e70:	19 f4       	brne	.+6      	; 0x7
							      >	      // SET DEVICE EXT is ignored
							      >	      getNch(5);
    7e72:	85 e0       	ldi	r24, 0x05	; 5	    7e72:	85 e0       	ldi	r24, 0x05	; 5
    7e74:	b4 d0       	rcall	.+360    	; 0x7 |	    7e74:	b4 d0       	rcall	.+360    	; 0x7
    7e76:	8a c0       	rjmp	.+276    	; 0x7	    7e76:	8a c0       	rjmp	.+276    	; 0x7
							      >	    }
							      >	    else if(ch == STK_LOAD_ADDRESS) {
    7e78:	85 35       	cpi	r24, 0x55	; 85	    7e78:	85 35       	cpi	r24, 0x55	; 85
    7e7a:	a1 f4       	brne	.+40     	; 0x7	    7e7a:	a1 f4       	brne	.+40     	; 0x7
							      >	      // LOAD ADDRESS
							      >	      address = getch();
    7e7c:	92 d0       	rcall	.+292    	; 0x7	    7e7c:	92 d0       	rcall	.+292    	; 0x7
    7e7e:	08 2f       	mov	r16, r24		    7e7e:	08 2f       	mov	r16, r24
    7e80:	10 e0       	ldi	r17, 0x00	; 0	    7e80:	10 e0       	ldi	r17, 0x00	; 0
    7e82:	10 93 01 02 	sts	0x0201, r17		    7e82:	10 93 01 02 	sts	0x0201, r17
    7e86:	00 93 00 02 	sts	0x0200, r16		    7e86:	00 93 00 02 	sts	0x0200, r16
							      >	      address = (address & 0xff) | (getch() << 8);
    7e8a:	8b d0       	rcall	.+278    	; 0x7	    7e8a:	8b d0       	rcall	.+278    	; 0x7
    7e8c:	90 e0       	ldi	r25, 0x00	; 0	    7e8c:	90 e0       	ldi	r25, 0x00	; 0
    7e8e:	98 2f       	mov	r25, r24		    7e8e:	98 2f       	mov	r25, r24
    7e90:	88 27       	eor	r24, r24		    7e90:	88 27       	eor	r24, r24
    7e92:	80 2b       	or	r24, r16		    7e92:	80 2b       	or	r24, r16
    7e94:	91 2b       	or	r25, r17		    7e94:	91 2b       	or	r25, r17
							      >	      address += address; // Convert from word address to byt
    7e96:	88 0f       	add	r24, r24		    7e96:	88 0f       	add	r24, r24
    7e98:	99 1f       	adc	r25, r25		    7e98:	99 1f       	adc	r25, r25
    7e9a:	90 93 01 02 	sts	0x0201, r25		    7e9a:	90 93 01 02 	sts	0x0201, r25
    7e9e:	80 93 00 02 	sts	0x0200, r24		    7e9e:	80 93 00 02 	sts	0x0200, r24
    7ea2:	73 c0       	rjmp	.+230    	; 0x7	    7ea2:	73 c0       	rjmp	.+230    	; 0x7
							      >	      verifySpace();
							      >	    }
							      >	    else if(ch == STK_UNIVERSAL) {
    7ea4:	86 35       	cpi	r24, 0x56	; 86	    7ea4:	86 35       	cpi	r24, 0x56	; 86
    7ea6:	29 f4       	brne	.+10     	; 0x7	    7ea6:	29 f4       	brne	.+10     	; 0x7
							      >	      // UNIVERSAL command is ignored
							      >	      getNch(4);
    7ea8:	84 e0       	ldi	r24, 0x04	; 4	    7ea8:	84 e0       	ldi	r24, 0x04	; 4
    7eaa:	99 d0       	rcall	.+306    	; 0x7 |	    7eaa:	99 d0       	rcall	.+306    	; 0x7
							      >	      putch(0x00);
    7eac:	80 e0       	ldi	r24, 0x00	; 0	    7eac:	80 e0       	ldi	r24, 0x00	; 0
    7eae:	71 d0       	rcall	.+226    	; 0x7	    7eae:	71 d0       	rcall	.+226    	; 0x7
    7eb0:	6d c0       	rjmp	.+218    	; 0x7	    7eb0:	6d c0       	rjmp	.+218    	; 0x7
							      >	    }
							      >	    /* Write memory, length is big endian and is in bytes  */
							      >	    else if(ch == STK_PROG_PAGE) {
    7eb2:	84 36       	cpi	r24, 0x64	; 100	    7eb2:	84 36       	cpi	r24, 0x64	; 100
    7eb4:	09 f0       	breq	.+2      	; 0x7	    7eb4:	09 f0       	breq	.+2      	; 0x7
    7eb6:	43 c0       	rjmp	.+134    	; 0x7	    7eb6:	43 c0       	rjmp	.+134    	; 0x7
							      >	      // PROGRAM PAGE - we support flash programming only, no
							      >	      uint8_t *bufPtr;
							      >	      uint16_t addrPtr;
							      >
							      >	      getLen();
    7eb8:	7c d0       	rcall	.+248    	; 0x7	    7eb8:	7c d0       	rcall	.+248    	; 0x7
							      >
							      >	      // Immediately start page erase - this will 4.5ms
							      >	      boot_page_erase((uint16_t)(void*)address);
    7eba:	e0 91 00 02 	lds	r30, 0x0200		    7eba:	e0 91 00 02 	lds	r30, 0x0200
    7ebe:	f0 91 01 02 	lds	r31, 0x0201		    7ebe:	f0 91 01 02 	lds	r31, 0x0201
    7ec2:	83 e0       	ldi	r24, 0x03	; 3	    7ec2:	83 e0       	ldi	r24, 0x03	; 3
    7ec4:	80 93 57 00 	sts	0x0057, r24		    7ec4:	80 93 57 00 	sts	0x0057, r24
    7ec8:	e8 95       	spm				    7ec8:	e8 95       	spm
    7eca:	c0 e0       	ldi	r28, 0x00	; 0	    7eca:	c0 e0       	ldi	r28, 0x00	; 0
    7ecc:	d1 e0       	ldi	r29, 0x01	; 1	    7ecc:	d1 e0       	ldi	r29, 0x01	; 1
							      >
							      >	      // While that is going on, read in page contents
							      >	      bufPtr = buff;
							      >	      do *bufPtr++ = getch();
    7ece:	69 d0       	rcall	.+210    	; 0x7	    7ece:	69 d0       	rcall	.+210    	; 0x7
    7ed0:	89 93       	st	Y+, r24			    7ed0:	89 93       	st	Y+, r24
							      >	      while (--length);
    7ed2:	80 91 02 02 	lds	r24, 0x0202		    7ed2:	80 91 02 02 	lds	r24, 0x0202
    7ed6:	81 50       	subi	r24, 0x01	; 1	    7ed6:	81 50       	subi	r24, 0x01	; 1
    7ed8:	80 93 02 02 	sts	0x0202, r24		    7ed8:	80 93 02 02 	sts	0x0202, r24
    7edc:	88 23       	and	r24, r24		    7edc:	88 23       	and	r24, r24
    7ede:	b9 f7       	brne	.-18     	; 0x7	    7ede:	b9 f7       	brne	.-18     	; 0x7
							      >
							      >	      // Read command terminator, start reply
							      >	      verifySpace();
    7ee0:	78 d0       	rcall	.+240    	; 0x7	    7ee0:	78 d0       	rcall	.+240    	; 0x7
							      >	      
							      >	      // If only a partial page is to be programmed, the eras
							      >	      // So check that here
							      >	      boot_spm_busy_wait();
    7ee2:	07 b6       	in	r0, 0x37	; 55	    7ee2:	07 b6       	in	r0, 0x37	; 55
    7ee4:	00 fc       	sbrc	r0, 0			    7ee4:	00 fc       	sbrc	r0, 0
    7ee6:	fd cf       	rjmp	.-6      	; 0x7	    7ee6:	fd cf       	rjmp	.-6      	; 0x7
							      >	      }
							      >	#endif
							      >
							      >	      // Copy buffer into programming buffer
							      >	      bufPtr = buff;
							      >	      addrPtr = (uint16_t)(void*)address;
    7ee8:	40 91 00 02 	lds	r20, 0x0200		    7ee8:	40 91 00 02 	lds	r20, 0x0200
    7eec:	50 91 01 02 	lds	r21, 0x0201		    7eec:	50 91 01 02 	lds	r21, 0x0201
    7ef0:	a0 e0       	ldi	r26, 0x00	; 0	    7ef0:	a0 e0       	ldi	r26, 0x00	; 0
    7ef2:	b1 e0       	ldi	r27, 0x01	; 1	    7ef2:	b1 e0       	ldi	r27, 0x01	; 1
							      >	      ch = SPM_PAGESIZE / 2;
							      >	      do {
							      >	        uint16_t a;
							      >	        a = *bufPtr++;
    7ef4:	2c 91       	ld	r18, X			    7ef4:	2c 91       	ld	r18, X
    7ef6:	30 e0       	ldi	r19, 0x00	; 0	    7ef6:	30 e0       	ldi	r19, 0x00	; 0
							      >	        a |= (*bufPtr++) << 8;
    7ef8:	11 96       	adiw	r26, 0x01	; 1	    7ef8:	11 96       	adiw	r26, 0x01	; 1
    7efa:	8c 91       	ld	r24, X			    7efa:	8c 91       	ld	r24, X
    7efc:	11 97       	sbiw	r26, 0x01	; 1	    7efc:	11 97       	sbiw	r26, 0x01	; 1
    7efe:	90 e0       	ldi	r25, 0x00	; 0	    7efe:	90 e0       	ldi	r25, 0x00	; 0
    7f00:	98 2f       	mov	r25, r24		    7f00:	98 2f       	mov	r25, r24
    7f02:	88 27       	eor	r24, r24		    7f02:	88 27       	eor	r24, r24
    7f04:	82 2b       	or	r24, r18		    7f04:	82 2b       	or	r24, r18
    7f06:	93 2b       	or	r25, r19		    7f06:	93 2b       	or	r25, r19
							      >	#ifdef VIRTUAL_BOOT_PARTITION
							      >	#define rstVect (*(uint16_t*)(0x204))
							      >	#define wdtVect (*(uint16_t*)(0x206))
							      >	#endif
							      >	/* main program starts here */
							      >	int main(void) {
    7f08:	12 96       	adiw	r26, 0x02	; 2	    7f08:	12 96       	adiw	r26, 0x02	; 2
							      >	      ch = SPM_PAGESIZE / 2;
							      >	      do {
							      >	        uint16_t a;
							      >	        a = *bufPtr++;
							      >	        a |= (*bufPtr++) << 8;
							      >	        boot_page_fill((uint16_t)(void*)addrPtr,a);
    7f0a:	fa 01       	movw	r30, r20		    7f0a:	fa 01       	movw	r30, r20
    7f0c:	0c 01       	movw	r0, r24			    7f0c:	0c 01       	movw	r0, r24
    7f0e:	d0 92 57 00 	sts	0x0057, r13		    7f0e:	d0 92 57 00 	sts	0x0057, r13
    7f12:	e8 95       	spm				    7f12:	e8 95       	spm
    7f14:	11 24       	eor	r1, r1			    7f14:	11 24       	eor	r1, r1
							      >	        addrPtr += 2;
    7f16:	4e 5f       	subi	r20, 0xFE	; 254	    7f16:	4e 5f       	subi	r20, 0xFE	; 254
    7f18:	5f 4f       	sbci	r21, 0xFF	; 255	    7f18:	5f 4f       	sbci	r21, 0xFF	; 255
							      >	      } while (--ch);
    7f1a:	f1 e0       	ldi	r31, 0x01	; 1	    7f1a:	f1 e0       	ldi	r31, 0x01	; 1
    7f1c:	a0 38       	cpi	r26, 0x80	; 128	    7f1c:	a0 38       	cpi	r26, 0x80	; 128
    7f1e:	bf 07       	cpc	r27, r31		    7f1e:	bf 07       	cpc	r27, r31
    7f20:	49 f7       	brne	.-46     	; 0x7	    7f20:	49 f7       	brne	.-46     	; 0x7
							      >	      
							      >	      // Write from programming buffer
							      >	      boot_page_write((uint16_t)(void*)address);
    7f22:	e0 91 00 02 	lds	r30, 0x0200		    7f22:	e0 91 00 02 	lds	r30, 0x0200
    7f26:	f0 91 01 02 	lds	r31, 0x0201		    7f26:	f0 91 01 02 	lds	r31, 0x0201
    7f2a:	e0 92 57 00 	sts	0x0057, r14		    7f2a:	e0 92 57 00 	sts	0x0057, r14
    7f2e:	e8 95       	spm				    7f2e:	e8 95       	spm
							      >	      boot_spm_busy_wait();
    7f30:	07 b6       	in	r0, 0x37	; 55	    7f30:	07 b6       	in	r0, 0x37	; 55
    7f32:	00 fc       	sbrc	r0, 0			    7f32:	00 fc       	sbrc	r0, 0
    7f34:	fd cf       	rjmp	.-6      	; 0x7	    7f34:	fd cf       	rjmp	.-6      	; 0x7
							      >
							      >	#if defined(RWWSRE)
							      >	      // Reenable read access to flash
							      >	      boot_rww_enable();
    7f36:	f0 92 57 00 	sts	0x0057, r15		    7f36:	f0 92 57 00 	sts	0x0057, r15
    7f3a:	e8 95       	spm				    7f3a:	e8 95       	spm
    7f3c:	27 c0       	rjmp	.+78     	; 0x7	    7f3c:	27 c0       	rjmp	.+78     	; 0x7
							      >	#endif
							      >
							      >	    }
							      >	    /* Read memory block mode, length is big endian.  */
							      >	    else if(ch == STK_READ_PAGE) {
    7f3e:	84 37       	cpi	r24, 0x74	; 116	    7f3e:	84 37       	cpi	r24, 0x74	; 116
    7f40:	b9 f4       	brne	.+46     	; 0x7	    7f40:	b9 f4       	brne	.+46     	; 0x7
							      >	      // READ PAGE - we only read flash
							      >	      getLen();
    7f42:	37 d0       	rcall	.+110    	; 0x7	    7f42:	37 d0       	rcall	.+110    	; 0x7
							      >	      verifySpace();
    7f44:	46 d0       	rcall	.+140    	; 0x7	    7f44:	46 d0       	rcall	.+140    	; 0x7
							      >	        else ch = pgm_read_byte_near(address);
							      >	        address++;
							      >	        putch(ch);
							      >	      } while (--length);
							      >	#else
							      >	      do putch(pgm_read_byte_near(address++));
    7f46:	e0 91 00 02 	lds	r30, 0x0200		    7f46:	e0 91 00 02 	lds	r30, 0x0200
    7f4a:	f0 91 01 02 	lds	r31, 0x0201		    7f4a:	f0 91 01 02 	lds	r31, 0x0201
    7f4e:	31 96       	adiw	r30, 0x01	; 1	    7f4e:	31 96       	adiw	r30, 0x01	; 1
    7f50:	f0 93 01 02 	sts	0x0201, r31		    7f50:	f0 93 01 02 	sts	0x0201, r31
    7f54:	e0 93 00 02 	sts	0x0200, r30		    7f54:	e0 93 00 02 	sts	0x0200, r30
    7f58:	31 97       	sbiw	r30, 0x01	; 1	    7f58:	31 97       	sbiw	r30, 0x01	; 1
    7f5a:	e4 91       	lpm	r30, Z+			    7f5a:	e4 91       	lpm	r30, Z+
    7f5c:	8e 2f       	mov	r24, r30		    7f5c:	8e 2f       	mov	r24, r30
    7f5e:	19 d0       	rcall	.+50     	; 0x7	    7f5e:	19 d0       	rcall	.+50     	; 0x7
							      >	      while (--length);
    7f60:	80 91 02 02 	lds	r24, 0x0202		    7f60:	80 91 02 02 	lds	r24, 0x0202
    7f64:	81 50       	subi	r24, 0x01	; 1	    7f64:	81 50       	subi	r24, 0x01	; 1
    7f66:	80 93 02 02 	sts	0x0202, r24		    7f66:	80 93 02 02 	sts	0x0202, r24
    7f6a:	88 23       	and	r24, r24		    7f6a:	88 23       	and	r24, r24
    7f6c:	61 f7       	brne	.-40     	; 0x7	    7f6c:	61 f7       	brne	.-40     	; 0x7
    7f6e:	0e c0       	rjmp	.+28     	; 0x7	    7f6e:	0e c0       	rjmp	.+28     	; 0x7
							      >	#endif
							      >	    }
							      >
							      >	    /* Get device signature bytes  */
							      >	    else if(ch == STK_READ_SIGN) {
    7f70:	85 37       	cpi	r24, 0x75	; 117	    7f70:	85 37       	cpi	r24, 0x75	; 117
    7f72:	39 f4       	brne	.+14     	; 0x7	    7f72:	39 f4       	brne	.+14     	; 0x7
							      >	      // READ SIGN - return what Avrdude wants to hear
							      >	      verifySpace();
    7f74:	2e d0       	rcall	.+92     	; 0x7	    7f74:	2e d0       	rcall	.+92     	; 0x7
							      >	      putch(SIGNATURE_0);
    7f76:	8e e1       	ldi	r24, 0x1E	; 30	    7f76:	8e e1       	ldi	r24, 0x1E	; 30
    7f78:	0c d0       	rcall	.+24     	; 0x7	    7f78:	0c d0       	rcall	.+24     	; 0x7
							      >	      putch(SIGNATURE_1);
    7f7a:	85 e9       	ldi	r24, 0x95	; 149	    7f7a:	85 e9       	ldi	r24, 0x95	; 149
    7f7c:	0a d0       	rcall	.+20     	; 0x7	    7f7c:	0a d0       	rcall	.+20     	; 0x7
							      >	      putch(SIGNATURE_2);
    7f7e:	8f e0       	ldi	r24, 0x0F	; 15	    7f7e:	8f e0       	ldi	r24, 0x0F	; 15
    7f80:	96 cf       	rjmp	.-212    	; 0x7	    7f80:	96 cf       	rjmp	.-212    	; 0x7
							      >	    }
							      >	    else if (ch == 'Q') {
    7f82:	81 35       	cpi	r24, 0x51	; 81	    7f82:	81 35       	cpi	r24, 0x51	; 81
    7f84:	11 f4       	brne	.+4      	; 0x7	    7f84:	11 f4       	brne	.+4      	; 0x7
							      >	      // Adaboot no-wait mod
							      >	      watchdogConfig(WATCHDOG_16MS);
    7f86:	88 e0       	ldi	r24, 0x08	; 8	    7f86:	88 e0       	ldi	r24, 0x08	; 8
    7f88:	19 d0       	rcall	.+50     	; 0x7	    7f88:	19 d0       	rcall	.+50     	; 0x7
							      >	      verifySpace();
							      >	    }
							      >	    else {
							      >	      // This covers the response to commands like STK_ENTER_
							      >	      verifySpace();
    7f8a:	23 d0       	rcall	.+70     	; 0x7	    7f8a:	23 d0       	rcall	.+70     	; 0x7
							      >	    }
							      >	    putch(STK_OK);
    7f8c:	80 e1       	ldi	r24, 0x10	; 16	    7f8c:	80 e1       	ldi	r24, 0x10	; 16
    7f8e:	01 d0       	rcall	.+2      	; 0x7	    7f8e:	01 d0       	rcall	.+2      	; 0x7
    7f90:	63 cf       	rjmp	.-314    	; 0x7	    7f90:	63 cf       	rjmp	.-314    	; 0x7

00007f92 <putch>:						00007f92 <putch>:
    }							      <
    putch(STK_OK);					      <
  }								  }
}								}

void putch(char ch) {						void putch(char ch) {
    7f92:	98 2f       	mov	r25, r24		    7f92:	98 2f       	mov	r25, r24
#ifndef SOFT_UART						#ifndef SOFT_UART
  while (!(UCSR0A & _BV(UDRE0)));				  while (!(UCSR0A & _BV(UDRE0)));
    7f94:	80 91 c0 00 	lds	r24, 0x00C0		    7f94:	80 91 c0 00 	lds	r24, 0x00C0
    7f98:	85 ff       	sbrs	r24, 5			    7f98:	85 ff       	sbrs	r24, 5
    7f9a:	fc cf       	rjmp	.-8      	; 0x7	    7f9a:	fc cf       	rjmp	.-8      	; 0x7
  UDR0 = ch;							  UDR0 = ch;
    7f9c:	90 93 c6 00 	sts	0x00C6, r25		    7f9c:	90 93 c6 00 	sts	0x00C6, r25
      [uartBit] "I" (UART_TX_BIT)				      [uartBit] "I" (UART_TX_BIT)
    :								    :
      "r25"							      "r25"
  );								  );
#endif								#endif
}								}
    7fa0:	08 95       	ret				    7fa0:	08 95       	ret

00007fa2 <getch>:						00007fa2 <getch>:
  return getch();						  return getch();
}								}

// Watchdog functions. These are only safe with interrupts tu	// Watchdog functions. These are only safe with interrupts tu
void watchdogReset() {						void watchdogReset() {
  __asm__ __volatile__ (					  __asm__ __volatile__ (
    7fa2:	a8 95       	wdr				    7fa2:	a8 95       	wdr
      [uartBit] "I" (UART_RX_BIT)				      [uartBit] "I" (UART_RX_BIT)
    :								    :
      "r25"							      "r25"
);								);
#else								#else
  while(!(UCSR0A & _BV(RXC0)));					  while(!(UCSR0A & _BV(RXC0)));
    7fa4:	80 91 c0 00 	lds	r24, 0x00C0		    7fa4:	80 91 c0 00 	lds	r24, 0x00C0
    7fa8:	87 ff       	sbrs	r24, 7			    7fa8:	87 ff       	sbrs	r24, 7
    7faa:	fc cf       	rjmp	.-8      	; 0x7	    7faa:	fc cf       	rjmp	.-8      	; 0x7
  ch = UDR0;							  ch = UDR0;
    7fac:	80 91 c6 00 	lds	r24, 0x00C6		    7fac:	80 91 c6 00 	lds	r24, 0x00C6
#ifdef LED_DATA_FLASH						#ifdef LED_DATA_FLASH
  LED_PIN |= _BV(LED);						  LED_PIN |= _BV(LED);
#endif								#endif

  return ch;							  return ch;
}								}
    7fb0:	08 95       	ret				    7fb0:	08 95       	ret

00007fb2 <getLen>:						00007fb2 <getLen>:
  } while (--count);						  } while (--count);
}								}
#endif								#endif

uint8_t getLen() {						uint8_t getLen() {
  getch();							  getch();
    7fb2:	f7 df       	rcall	.-18     	; 0x7	    7fb2:	f7 df       	rcall	.-18     	; 0x7
  length = getch();						  length = getch();
    7fb4:	f6 df       	rcall	.-20     	; 0x7	    7fb4:	f6 df       	rcall	.-20     	; 0x7
    7fb6:	80 93 02 02 	sts	0x0202, r24		    7fb6:	80 93 02 02 	sts	0x0202, r24
  return getch();						  return getch();
							      >	}
    7fba:	f3 cf       	rjmp	.-26     	; 0x7	    7fba:	f3 cf       	rjmp	.-26     	; 0x7

00007fbc <watchdogConfig>:					00007fbc <watchdogConfig>:
    "wdr\n"							    "wdr\n"
  );								  );
}								}

void watchdogConfig(uint8_t x) {				void watchdogConfig(uint8_t x) {
  WDTCSR = _BV(WDCE) | _BV(WDE);				  WDTCSR = _BV(WDCE) | _BV(WDE);
    7fbc:	e0 e6       	ldi	r30, 0x60	; 96	    7fbc:	e0 e6       	ldi	r30, 0x60	; 96
    7fbe:	f0 e0       	ldi	r31, 0x00	; 0	    7fbe:	f0 e0       	ldi	r31, 0x00	; 0
    7fc0:	98 e1       	ldi	r25, 0x18	; 24	    7fc0:	98 e1       	ldi	r25, 0x18	; 24
    7fc2:	90 83       	st	Z, r25			    7fc2:	90 83       	st	Z, r25
  WDTCSR = x;							  WDTCSR = x;
    7fc4:	80 83       	st	Z, r24			    7fc4:	80 83       	st	Z, r24
}								}
    7fc6:	08 95       	ret				    7fc6:	08 95       	ret

00007fc8 <appStart>:						00007fc8 <appStart>:

void appStart() {						void appStart() {
  watchdogConfig(WATCHDOG_OFF);					  watchdogConfig(WATCHDOG_OFF);
    7fc8:	80 e0       	ldi	r24, 0x00	; 0	    7fc8:	80 e0       	ldi	r24, 0x00	; 0
    7fca:	f8 df       	rcall	.-16     	; 0x7	    7fca:	f8 df       	rcall	.-16     	; 0x7
  __asm__ __volatile__ (					  __asm__ __volatile__ (
    7fcc:	ee 27       	eor	r30, r30		    7fcc:	ee 27       	eor	r30, r30
    7fce:	ff 27       	eor	r31, r31		    7fce:	ff 27       	eor	r31, r31
    7fd0:	09 94       	ijmp				    7fd0:	09 94       	ijmp

00007fd2 <verifySpace>:						00007fd2 <verifySpace>:
  do getch(); while (--count);					  do getch(); while (--count);
  verifySpace();						  verifySpace();
}								}

void verifySpace() {						void verifySpace() {
  if (getch() != CRC_EOP) appStart();				  if (getch() != CRC_EOP) appStart();
    7fd2:	e7 df       	rcall	.-50     	; 0x7	    7fd2:	e7 df       	rcall	.-50     	; 0x7
    7fd4:	80 32       	cpi	r24, 0x20	; 32	    7fd4:	80 32       	cpi	r24, 0x20	; 32
    7fd6:	09 f0       	breq	.+2      	; 0x7	    7fd6:	09 f0       	breq	.+2      	; 0x7
    7fd8:	f7 df       	rcall	.-18     	; 0x7	    7fd8:	f7 df       	rcall	.-18     	; 0x7
  putch(STK_INSYNC);						  putch(STK_INSYNC);
    7fda:	84 e1       	ldi	r24, 0x14	; 20	    7fda:	84 e1       	ldi	r24, 0x14	; 20
							      >	}
    7fdc:	da cf       	rjmp	.-76     	; 0x7	    7fdc:	da cf       	rjmp	.-76     	; 0x7
							      <
00007fde <getNch>:					      <
    ::[count] "M" (UART_B_VALUE)				    ::[count] "M" (UART_B_VALUE)
  );								  );
}								}
#endif								#endif

void getNch(uint8_t count) {					void getNch(uint8_t count) {
    7fde:	1f 93       	push	r17			    7fde:	1f 93       	push	r17
    7fe0:	18 2f       	mov	r17, r24		    7fe0:	18 2f       	mov	r17, r24
							      >
							      >	00007fe2 <getNch>:
  do getch(); while (--count);					  do getch(); while (--count);
    7fe2:	df df       	rcall	.-66     	; 0x7	    7fe2:	df df       	rcall	.-66     	; 0x7
    7fe4:	11 50       	subi	r17, 0x01	; 1	    7fe4:	11 50       	subi	r17, 0x01	; 1
    7fe6:	e9 f7       	brne	.-6      	; 0x7 |	    7fe6:	e9 f7       	brne	.-6      	; 0x7
  verifySpace();						  verifySpace();
    7fe8:	f4 df       	rcall	.-24     	; 0x7	    7fe8:	f4 df       	rcall	.-24     	; 0x7
}								}
    7fea:	1f 91       	pop	r17			    7fea:	1f 91       	pop	r17
    7fec:	08 95       	ret				    7fec:	08 95       	ret
